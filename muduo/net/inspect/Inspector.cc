// Copyright 2010, Shuo Chen.  All rights reserved.
// http://code.google.com/p/muduo/
//
// Use of this source code is governed by a BSD-style license
// that can be found in the License file.

// Author: Shuo Chen (chenshuo at chenshuo dot com)
//

#include <muduo/net/inspect/Inspector.h>

#include <muduo/base/Logging.h>
#include <muduo/base/Thread.h>
#include <muduo/net/EventLoop.h>
#include <muduo/net/http/HttpRequest.h>
#include <muduo/net/http/HttpResponse.h>
#include <muduo/net/inspect/ProcessInspector.h>

//#include <iostream>
//#include <iterator>
//#include <sstream>
#include <boost/bind.hpp>
#include <boost/algorithm/string/classification.hpp>
#include <boost/algorithm/string/split.hpp>

using namespace muduo;
using namespace muduo::net;

namespace
{
Inspector* g_globalInspector = 0;

// Looks buggy
std::vector<string> split(const string& str)
{
  std::vector<string> result;
  size_t start = 0;
  size_t pos = str.find('/');
  while (pos != string::npos)
  {
    if (pos > start)
    {
      result.push_back(str.substr(start, pos-start));
    }
    start = pos+1;
    pos = str.find('/', start);
  }

  if (start < str.length())
  {
    result.push_back(str.substr(start));
  }

  return result;
}

}

extern char favicon[1743];

Inspector::Inspector(EventLoop* loop,
                     const InetAddress& httpAddr,
                     const string& name)
    : server_(loop, httpAddr, "Inspector:"+name),
      processInspector_(new ProcessInspector)
{
  assert(CurrentThread::isMainThread());
  assert(g_globalInspector == 0);
  g_globalInspector = this;
  server_.setHttpCallback(boost::bind(&Inspector::onRequest, this, _1, _2));
  processInspector_->registerCommands(this);
  loop->runAfter(0, boost::bind(&Inspector::start, this)); // little race condition
}

Inspector::~Inspector()
{
  assert(CurrentThread::isMainThread());
  g_globalInspector = NULL;
}

void Inspector::add(const string& module,
                    const string& command,
                    const Callback& cb,
                    const string& help)
{
  MutexLockGuard lock(mutex_);
  modules_[module][command] = cb;
  helps_[module][command] = help;
}

void Inspector::start()
{
  server_.start();
}

void Inspector::onRequest(const HttpRequest& req, HttpResponse* resp)
{
  if (req.path() == "/")
  {
    string result;
    MutexLockGuard lock(mutex_);
    for (std::map<string, HelpList>::const_iterator helpListI = helps_.begin();
         helpListI != helps_.end();
         ++helpListI)
    {
      const HelpList& list = helpListI->second;
      for (HelpList::const_iterator it = list.begin();
           it != list.end();
           ++it)
      {
        result += "/";
        result += helpListI->first;
        result += "/";
        result += it->first;
        result += "\t";
        result += it->second;
        result += "\n";
      }
    }
    resp->setStatusCode(HttpResponse::k200Ok);
    resp->setStatusMessage("OK");
    resp->setContentType("text/plain");
    resp->setBody(result);
  }
  else
  {
    std::vector<string> result = split(req.path());
    // boost::split(result, req.path(), boost::is_any_of("/"));
    //std::copy(result.begin(), result.end(), std::ostream_iterator<string>(std::cout, ", "));
    //std::cout << "\n";
    bool ok = false;
    if (result.size() == 0)
    {
      LOG_DEBUG << req.path();
    }
    else if (result.size() == 1)
    {
      string module = result[0];
      if (module == "favicon.ico")
      {
        resp->setStatusCode(HttpResponse::k200Ok);
        resp->setStatusMessage("OK");
        resp->setContentType("image/png");
        resp->setBody(string(favicon, sizeof favicon));

        ok = true;
      }
      else
      {
        LOG_ERROR << "Unimplemented " << module;
      }
    }
    else
    {
      string module = result[0];
      std::map<string, CommandList>::const_iterator commListI = modules_.find(module);
      if (commListI != modules_.end())
      {
        string command = result[1];
        const CommandList& commList = commListI->second;
        CommandList::const_iterator it = commList.find(command);
        if (it != commList.end())
        {
          ArgList args(result.begin()+2, result.end());
          if (it->second)
          {
            resp->setStatusCode(HttpResponse::k200Ok);
            resp->setStatusMessage("OK");
            resp->setContentType("text/plain");
            const Callback& cb = it->second;
            resp->setBody(cb(req.method(), args));
            ok = true;
          }
        }
      }

    }

    if (!ok)
    {
      resp->setStatusCode(HttpResponse::k404NotFound);
      resp->setStatusMessage("Not Found");
    }
    //resp->setCloseConnection(true);
  }
}

#pragma GCC diagnostic ignored "-Wnarrowing"
#pragma GCC diagnostic ignored "-Wconversion"

char favicon[1743] =
{
  0x89,0x50,0x4E,0x47,0x0D,0x0A,0x1A,0x0A,0x00,0x00,0x00,
  0x0D,0x49,0x48,0x44,0x52,0x00,0x00,0x00,0x10,0x00,0x00,
  0x00,0x10,0x08,0x06,0x00,0x00,0x00,0x1F,0xF3,0xFF,0x61,
  0x00,0x00,0x00,0x04,0x73,0x42,0x49,0x54,0x08,0x08,0x08,
  0x08,0x7C,0x08,0x64,0x88,0x00,0x00,0x00,0x09,0x70,0x48,
  0x59,0x73,0x00,0x00,0x0B,0x12,0x00,0x00,0x0B,0x12,0x01,
  0xD2,0xDD,0x7E,0xFC,0x00,0x00,0x00,0x1C,0x74,0x45,0x58,
  0x74,0x53,0x6F,0x66,0x74,0x77,0x61,0x72,0x65,0x00,0x41,
  0x64,0x6F,0x62,0x65,0x20,0x46,0x69,0x72,0x65,0x77,0x6F,
  0x72,0x6B,0x73,0x20,0x43,0x53,0x33,0x98,0xD6,0x46,0x03,
  0x00,0x00,0x00,0x15,0x74,0x45,0x58,0x74,0x43,0x72,0x65,
  0x61,0x74,0x69,0x6F,0x6E,0x20,0x54,0x69,0x6D,0x65,0x00,
  0x32,0x2F,0x31,0x37,0x2F,0x30,0x38,0x20,0x9C,0xAA,0x58,
  0x00,0x00,0x04,0x11,0x74,0x45,0x58,0x74,0x58,0x4D,0x4C,
  0x3A,0x63,0x6F,0x6D,0x2E,0x61,0x64,0x6F,0x62,0x65,0x2E,
  0x78,0x6D,0x70,0x00,0x3C,0x3F,0x78,0x70,0x61,0x63,0x6B,
  0x65,0x74,0x20,0x62,0x65,0x67,0x69,0x6E,0x3D,0x22,0x20,
  0x20,0x20,0x22,0x20,0x69,0x64,0x3D,0x22,0x57,0x35,0x4D,
  0x30,0x4D,0x70,0x43,0x65,0x68,0x69,0x48,0x7A,0x72,0x65,
  0x53,0x7A,0x4E,0x54,0x63,0x7A,0x6B,0x63,0x39,0x64,0x22,
  0x3F,0x3E,0x0A,0x3C,0x78,0x3A,0x78,0x6D,0x70,0x6D,0x65,
  0x74,0x61,0x20,0x78,0x6D,0x6C,0x6E,0x73,0x3A,0x78,0x3D,
  0x22,0x61,0x64,0x6F,0x62,0x65,0x3A,0x6E,0x73,0x3A,0x6D,
  0x65,0x74,0x61,0x2F,0x22,0x20,0x78,0x3A,0x78,0x6D,0x70,
  0x74,0x6B,0x3D,0x22,0x41,0x64,0x6F,0x62,0x65,0x20,0x58,
  0x4D,0x50,0x20,0x43,0x6F,0x72,0x65,0x20,0x34,0x2E,0x31,
  0x2D,0x63,0x30,0x33,0x34,0x20,0x34,0x36,0x2E,0x32,0x37,
  0x32,0x39,0x37,0x36,0x2C,0x20,0x53,0x61,0x74,0x20,0x4A,
  0x61,0x6E,0x20,0x32,0x37,0x20,0x32,0x30,0x30,0x37,0x20,
  0x32,0x32,0x3A,0x31,0x31,0x3A,0x34,0x31,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x22,0x3E,0x0A,0x20,0x20,0x20,
  0x3C,0x72,0x64,0x66,0x3A,0x52,0x44,0x46,0x20,0x78,0x6D,
  0x6C,0x6E,0x73,0x3A,0x72,0x64,0x66,0x3D,0x22,0x68,0x74,
  0x74,0x70,0x3A,0x2F,0x2F,0x77,0x77,0x77,0x2E,0x77,0x33,
  0x2E,0x6F,0x72,0x67,0x2F,0x31,0x39,0x39,0x39,0x2F,0x30,
  0x32,0x2F,0x32,0x32,0x2D,0x72,0x64,0x66,0x2D,0x73,0x79,
  0x6E,0x74,0x61,0x78,0x2D,0x6E,0x73,0x23,0x22,0x3E,0x0A,
  0x20,0x20,0x20,0x20,0x20,0x20,0x3C,0x72,0x64,0x66,0x3A,
  0x44,0x65,0x73,0x63,0x72,0x69,0x70,0x74,0x69,0x6F,0x6E,
  0x20,0x72,0x64,0x66,0x3A,0x61,0x62,0x6F,0x75,0x74,0x3D,
  0x22,0x22,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x78,0x6D,0x6C,0x6E,0x73,0x3A,0x78,
  0x61,0x70,0x3D,0x22,0x68,0x74,0x74,0x70,0x3A,0x2F,0x2F,
  0x6E,0x73,0x2E,0x61,0x64,0x6F,0x62,0x65,0x2E,0x63,0x6F,
  0x6D,0x2F,0x78,0x61,0x70,0x2F,0x31,0x2E,0x30,0x2F,0x22,
  0x3E,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x3C,0x78,0x61,0x70,0x3A,0x43,0x72,0x65,0x61,0x74,0x6F,
  0x72,0x54,0x6F,0x6F,0x6C,0x3E,0x41,0x64,0x6F,0x62,0x65,
  0x20,0x46,0x69,0x72,0x65,0x77,0x6F,0x72,0x6B,0x73,0x20,
  0x43,0x53,0x33,0x3C,0x2F,0x78,0x61,0x70,0x3A,0x43,0x72,
  0x65,0x61,0x74,0x6F,0x72,0x54,0x6F,0x6F,0x6C,0x3E,0x0A,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x3C,0x78,
  0x61,0x70,0x3A,0x43,0x72,0x65,0x61,0x74,0x65,0x44,0x61,
  0x74,0x65,0x3E,0x32,0x30,0x30,0x38,0x2D,0x30,0x32,0x2D,
  0x31,0x37,0x54,0x30,0x32,0x3A,0x33,0x36,0x3A,0x34,0x35,
  0x5A,0x3C,0x2F,0x78,0x61,0x70,0x3A,0x43,0x72,0x65,0x61,
  0x74,0x65,0x44,0x61,0x74,0x65,0x3E,0x0A,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x3C,0x78,0x61,0x70,0x3A,
  0x4D,0x6F,0x64,0x69,0x66,0x79,0x44,0x61,0x74,0x65,0x3E,
  0x32,0x30,0x30,0x38,0x2D,0x30,0x33,0x2D,0x32,0x34,0x54,
  0x31,0x39,0x3A,0x30,0x30,0x3A,0x34,0x32,0x5A,0x3C,0x2F,
  0x78,0x61,0x70,0x3A,0x4D,0x6F,0x64,0x69,0x66,0x79,0x44,
  0x61,0x74,0x65,0x3E,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,
  0x3C,0x2F,0x72,0x64,0x66,0x3A,0x44,0x65,0x73,0x63,0x72,
  0x69,0x70,0x74,0x69,0x6F,0x6E,0x3E,0x0A,0x20,0x20,0x20,
  0x20,0x20,0x20,0x3C,0x72,0x64,0x66,0x3A,0x44,0x65,0x73,
  0x63,0x72,0x69,0x70,0x74,0x69,0x6F,0x6E,0x20,0x72,0x64,
  0x66,0x3A,0x61,0x62,0x6F,0x75,0x74,0x3D,0x22,0x22,0x0A,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x78,0x6D,0x6C,0x6E,0x73,0x3A,0x64,0x63,0x3D,0x22,
  0x68,0x74,0x74,0x70,0x3A,0x2F,0x2F,0x70,0x75,0x72,0x6C,
  0x2E,0x6F,0x72,0x67,0x2F,0x64,0x63,0x2F,0x65,0x6C,0x65,
  0x6D,0x65,0x6E,0x74,0x73,0x2F,0x31,0x2E,0x31,0x2F,0x22,
  0x3E,0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x3C,0x64,0x63,0x3A,0x66,0x6F,0x72,0x6D,0x61,0x74,0x3E,
  0x69,0x6D,0x61,0x67,0x65,0x2F,0x70,0x6E,0x67,0x3C,0x2F,
  0x64,0x63,0x3A,0x66,0x6F,0x72,0x6D,0x61,0x74,0x3E,0x0A,
  0x20,0x20,0x20,0x20,0x20,0x20,0x3C,0x2F,0x72,0x64,0x66,
  0x3A,0x44,0x65,0x73,0x63,0x72,0x69,0x70,0x74,0x69,0x6F,
  0x6E,0x3E,0x0A,0x20,0x20,0x20,0x3C,0x2F,0x72,0x64,0x66,
  0x3A,0x52,0x44,0x46,0x3E,0x0A,0x3C,0x2F,0x78,0x3A,0x78,
  0x6D,0x70,0x6D,0x65,0x74,0x61,0x3E,0x0A,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0A,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x0A,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,
  0x20,0x20,0x20,0x20,0x35,0x1D,0x52,0x64,0x00,0x00,0x02,
  0x0B,0x49,0x44,0x41,0x54,0x38,0x8D,0xA5,0x93,0x41,0x6B,
  0x1A,0x41,0x18,0x86,0x9F,0x89,0x06,0x23,0x2E,0x74,0xF5,
  0x20,0x4A,0x0E,0x6B,0x20,0xE4,0xE2,0xA5,0x78,0xC8,0xA1,
  0x78,0x89,0x82,0x17,0x85,0x82,0x82,0x3D,0x26,0x62,0x58,
  0x72,0xCD,0x4F,0xF1,0x18,0x4B,0x1B,0x2F,0xA5,0x32,0xE0,
  0xB5,0x9E,0x35,0x1A,0x58,0x2F,0xE9,0x0F,0xE8,0x65,0x6D,
  0x84,0xA2,0x84,0x2C,0x0A,0x6B,0x58,0x62,0xA7,0x87,0x68,
  0x68,0x13,0xA1,0xA5,0x79,0xE1,0x3B,0x0C,0xC3,0xFB,0xCC,
  0x37,0xEF,0x7C,0x23,0x94,0x52,0xBC,0x44,0x7E,0x00,0x21,
  0x04,0x00,0xAD,0x56,0xCB,0x18,0x8F,0xC7,0x0D,0xDB,0xB6,
  0xD3,0x8E,0xE3,0xF8,0x83,0xC1,0xA0,0x8A,0xC7,0xE3,0x3F,
  0x12,0x89,0x44,0xB9,0x5C,0x2E,0xF7,0x56,0xA6,0xDF,0x0F,
  0x15,0x4A,0x29,0x84,0x10,0x34,0x9B,0xCD,0x77,0x96,0x65,
  0x7D,0x36,0x0C,0x43,0xE4,0x72,0x39,0xE2,0xF1,0x38,0xB7,
  0xB7,0xB7,0xF4,0xFB,0x7D,0x06,0x83,0x01,0xA9,0x54,0xEA,
  0x43,0xA5,0x52,0x39,0x7E,0x0A,0x40,0x29,0x45,0xAB,0xD5,
  0x32,0x4E,0x4F,0x4F,0x7F,0x4A,0x29,0xD5,0xDD,0xDD,0xDD,
  0xB3,0xEA,0xF5,0x7A,0xEA,0xE4,0xE4,0x44,0x49,0x29,0xD3,
  0x2B,0xCF,0xAA,0x36,0x00,0xC6,0xE3,0x71,0x63,0x67,0x67,
  0x47,0xE4,0xF3,0x79,0x00,0x3C,0xCF,0xA3,0x50,0x28,0xE0,
  0xBA,0x2E,0x9E,0xE7,0x91,0x4A,0xA5,0xD8,0xDB,0xDB,0x63,
  0x34,0x1A,0x7D,0x7C,0x9A,0xC1,0x06,0x80,0x6D,0xDB,0xE9,
  0x6C,0x36,0x8B,0xCF,0xE7,0xC3,0xF3,0x3C,0x5C,0xD7,0x05,
  0x60,0x36,0x9B,0xE1,0xBA,0x2E,0x8B,0xC5,0x82,0x4C,0x26,
  0x83,0x6D,0xDB,0xBB,0x6B,0x43,0x74,0x1C,0xC7,0x1F,0x8B,
  0xC5,0x00,0x28,0x16,0x8B,0x8F,0x9B,0xD5,0x6A,0x15,0x00,
  0x29,0x25,0x9A,0xA6,0x31,0x9F,0xCF,0xC5,0x5A,0xC0,0xD6,
  0xD6,0x96,0x9A,0x4C,0x26,0x22,0x14,0x0A,0x21,0xA5,0x64,
  0x36,0x9B,0x51,0xAD,0x56,0xA9,0xD5,0x6A,0x68,0x9A,0x06,
  0xC0,0xF5,0xF5,0x35,0xBA,0xAE,0xDF,0xAF,0xBD,0x82,0x61,
  0x18,0xDF,0x2C,0xCB,0x7A,0x20,0xFA,0xFD,0x04,0x02,0x01,
  0x00,0x34,0x4D,0x23,0x10,0x08,0xB0,0x58,0x2C,0xE8,0x76,
  0xBB,0x24,0x12,0x89,0x8B,0xB5,0x1D,0x6C,0x6F,0x6F,0x1F,
  0x75,0x3A,0x9D,0x7E,0x38,0x1C,0x26,0x97,0xCB,0x21,0x84,
  0x40,0x4A,0x09,0xC0,0xE6,0xE6,0x26,0xED,0x76,0x9B,0xC9,
  0x64,0xA2,0xA6,0xD3,0xE9,0x27,0x78,0x98,0x9B,0xD5,0x53,
  0x3E,0xCE,0xC1,0xF9,0xF9,0xF9,0xFB,0xC1,0x60,0x70,0x9C,
  0x4C,0x26,0xD9,0xDF,0xDF,0x27,0x12,0x89,0x30,0x1C,0x0E,
  0xB9,0xBC,0xBC,0xE4,0xE6,0xE6,0x46,0xF9,0x7C,0xBE,0x2F,
  0xD3,0xE9,0x34,0x0F,0x34,0xEA,0xF5,0x7A,0xE5,0x19,0x60,
  0x19,0xD6,0x9B,0xD1,0x68,0xD4,0x18,0x0E,0x87,0xBB,0xF3,
  0xF9,0x5C,0xE8,0xBA,0x7E,0x6F,0x18,0xC6,0x45,0x34,0x1A,
  0x3D,0x2C,0x95,0x4A,0xDF,0x4D,0xD3,0xBC,0x02,0x5E,0x03,
  0x5F,0x81,0x83,0xB3,0xB3,0x33,0xE7,0x0F,0xC0,0xDF,0x64,
  0x9A,0xA6,0xB1,0x34,0xEB,0x80,0x03,0x1C,0x6C,0xFC,0x93,
  0x73,0xA9,0x7A,0xBD,0x6E,0x03,0x47,0xCB,0xA5,0x0E,0xBC,
  0xE2,0x7F,0x7E,0xA3,0x69,0x9A,0x87,0xA6,0x69,0xBE,0x55,
  0x4A,0x3D,0x64,0xF0,0x12,0xFD,0x02,0x0D,0x53,0x06,0x24,
  0x88,0x3F,0xE1,0x69,0x00,0x00,0x00,0x00,0x49,0x45,0x4E,
  0x44,0xAE,0x42,0x60,0x82,
};
